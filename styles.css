/*GLOBAL RESET*/
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  /*we have to define height and width with vh and vw here, otherwise our CSS GRID Layout will not fill the entire space up!*/
  height: 100vh;
  width: 100vw;
  font-family: sans-serif;
  color: #343a40;
  font-size: 24px;
  text-align: center; /*This will be get inherited by all other components!*/
  font-weight: bold; /*This will be get inherited by all other components!*/

  /*WE IMPLEMENT CSS GRID IN PARENT OF OUR ELEMENT => IT MEANS HERE IN BODY - We need here a GRID system because we have two dimentional system => CSS GRID includes 2 rows and 4 rows*/
  display: grid;
  /*first of all, every section with pixel and the variable section which will be filled up the remaining space with 1fr
  ADVANTAGE IS: WHEN WE CHANGE THE SIZE OF THE PAGE(RESPONSIVENESS MODE), EMAIL VIEW SPACE CHANGES TOO!.*/
  grid-template-columns: 80px 400px 1fr 250px;
  grid-template-rows: 80px 1fr;
}

nav,
section,
main,
aside {
  padding-top: 24px;
}

nav {
  background-color: #343a40;
  color: #fff;
  grid-column: 1/2;
  grid-row: 1/-1; /*from first row untill the end*/
}

menu {
  background-color: #7048e8;
  grid-column: 2/-1; /*from second column untill the end*/
  grid-row: 1/2;

  /*THE PARENT OF BUTTONS IS MENU => THAT'S WHY I DEFINE THE FLEXBOX HERE:*/
  display: flex;
  align-items: center;
  /* justify-content: center; */
  gap: 12px; /*gap as default is horizontally! => it makes the distance between items in a row direction(horizontally)*/
  padding: 0 40px;
}

button {
  display: inline-block; /*This is OPTIONAL*/
  font-size: 16px;
  font-weight: bold;
  background-color: #5f3dc4;
  border: none;
  cursor: pointer;
  color: #fff; /*It doesn't get inherited from the parent => menu, i don't know why? that's why i have to write it here again manually and remove it from menu*/
  padding: 8px 12px;
  /*buttons aligned center - because they are treated as inline element like text and in body text-align:center => button get inherited this feature from body too!*/
}

/*We use LAST CHILD PSEUDO CLASS here to change its color to red!
OF COURSE THE GOOD NEWS IS THAT => THEY ARE ALL BUTTONS, THAT'S WHY LAST CHILD WORKS HERE VERY WELL!*/
menu button:last-child {
  background-color: #d6336c;
  /* margin-left: 900px; Instead of Manually calculate this value to 900px, we can use the auto*/

  margin-left: auto; /*auto will calculate the position of Trash button base on the width of the container and we don't need to calcualte it manually!
  ADVANTAGE IS: WHEN WE CHANGE THE SIZE OF THE PAGE(RESPONSIVENESS MODE), THIS LEFT MARGIN CHANGES TOO!.*/
}

/*Inbox*/
section {
  background-color: #e9ecef;
  grid-column: 2/3;
  grid-row: 2/-1;
  padding: 40px;

  /*INSTEAD OF USING THE FLEXBOX HERE, WE CAN USE THE MARGIN-BOTTOM:40px BELOW IN .email AND IT WORKS WELL TOO! BUT MORE ADVANCED METHOD IS TO USE THE DISPLAY:FLEX */
  display: flex;
  flex-direction: column; /*We have to change the flex direction to column, otherwise, all the items are shown in a row(horizontally!), but we want to be shown in a column(vertically!)*/
  gap: 40px; /*and now, the gap would be in a column way(vertically) and not in a row(horizontally) anymore!*/
}

.email {
  background-color: #adb5bd;
  height: 96px;
  /* margin-bottom: 40px; to separate these 10 Email boxes from each other! 
  INSTEAD OF USING MARGIN-BOTTOM HERE, I USED FLEXBOX IN SECTION ABOVE, ... BUT ANY WAY, MARGIN-BOTTOM HERE WORKS WELL TOO!*/
  align-content: center;
  font-weight: 800;
  scroll-behavior: auto;
}

/*Email-View*/
main {
  grid-column: 3/4;
  grid-row: 2/-1;
}

aside {
  background-color: #e9ecef;
  grid-column: 4/5;
  grid-row: 2/-1;
}
